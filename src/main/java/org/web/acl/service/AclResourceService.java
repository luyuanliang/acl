/**
 * @Description AclResourceService is generated by the auto build Tools.
 * @author luyl
 * @time 2017-09-11 17:08:20
 */

package org.web.acl.service;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import org.web.acl.dao.AclResourceDAO;
import org.web.acl.domain.AclResourceDO;
import org.web.acl.query.QueryAclResource;
import org.web.exception.ResultMessageEnum;
import org.web.exception.ServiceException;
import org.web.helper.EnumHelper;
import org.web.helper.ServiceExceptionHelper;

import javax.annotation.Resource;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service("aclResourceService")
public class AclResourceService {

    private static Logger logger = Logger.getLogger(AclResourceService.class);

    @Resource
    private AclResourceDAO aclResourceDAO;

    /**
     * @param aclResourceId
     * @return 返回唯一记录AclResource.
     * @Decription 根据主键查询记录
     * @author luyl
     * @date 2017-09-11 17:08:20
     */
    public AclResourceDO selectAclResourceByAclResourceId(Long aclResourceId) throws ServiceException {
        if (aclResourceId == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        return aclResourceDAO.selectAclResourceByAclResourceId(aclResourceId);
    }

    /**
     * @param queryAclResource 封装了查询条件对象.
     * @return 返回一组记录.
     * @Decription 根据查询条件, 返回List.
     * @author luyl
     * @date 2017-09-11 17:08:20
     */
    public List<AclResourceDO> selectAclResourceList(QueryAclResource queryAclResource) throws ServiceException {

        if (queryAclResource == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        //TODO
        setDefaultQuery(queryAclResource);
        return aclResourceDAO.selectAclResourceList(queryAclResource);
    }

    /**
     * @param queryAclResource 封装了查询条件对象.
     * @return 返回查询条件返回的记录总数.
     * @Decription 根据查询条件, 查询满足条件的记录数.
     * @author luyl
     * @date 2017-09-11 17:08:20
     */
    public Integer countAclResourceList(QueryAclResource queryAclResource) throws ServiceException {
        if (queryAclResource == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        setDefaultQuery(queryAclResource);
        return aclResourceDAO.countAclResourceList(queryAclResource);
    }

    /**
     * 默认不查询逻辑删除的数据
     */
    private void setDefaultQuery(QueryAclResource queryAclResource) {
        if (StringUtils.isEmpty(queryAclResource.getIsDelete())) {
            queryAclResource.setIsDelete(EnumHelper.DELETE.N.name());
        }
        if (StringUtils.isEmpty(queryAclResource.getOrderByClause())) {
            //queryAclResource.setOrderByClause("  updateDate DESC ");
        }
    }

    /**
     * @param queryAclResource 封装了查询条件对象.
     * @return 返回第一条记录.
     * @Decription 根据查询条件, 返回第一条记录.
     * @author luyl
     * @date 2017-09-11 17:08:20
     */
    public AclResourceDO selectOneAclResource(QueryAclResource queryAclResource) throws ServiceException {
        queryAclResource.setFirstRecord();
        List<AclResourceDO> list = selectAclResourceList(queryAclResource);
        if (list != null && list.size() > 0) {
            return list.get(0);
        }
        return null;
    }

    /**
     * @param queryAclResource 封装了查询条件对象.
     * @return 返回不重复信息.
     * @Decription 根据查询条件, 查询不重复信息.
     * @author luyl
     * @date 2017-09-11 17:08:20
     */
    public List<String> selectDistinctList(QueryAclResource queryAclResource) throws ServiceException {
        if (StringUtils.isEmpty(queryAclResource.getIsDelete())) {
            queryAclResource.setIsDelete(EnumHelper.DELETE.N.name());
        }
        return aclResourceDAO.selectDistinctList(queryAclResource);
    }


    /**
     * @param aclResourceDO 封装新增的对象.
     * @return 返回原始对象，如果用到数据库自增主键，并会自动设置新增主键.
     * @Decription 插入一条新记录.
     * @author luyl
     * @date 2017-09-11 17:08:20
     */
    public AclResourceDO insertAclResource(AclResourceDO aclResourceDO) throws ServiceException {
        // check params first.
        setDefaultValue(aclResourceDO);
        checkInsert(aclResourceDO);

        AclResourceDO fromDB = checkExist(aclResourceDO);
        if (fromDB != null) {
            throw ServiceExceptionHelper.buildServiceException(ResultMessageEnum.RECORD_EXIST, null, "资源信息重复");
        }
        aclResourceDAO.insertAclResource(aclResourceDO);
        return aclResourceDO;
    }

    /**
     * @param aclResourceDO 封装新增的对象.
     * @return 返回原始对象，如果用到数据库自增主键，并会自动设置新增主键.
     * @Decription 插入一条新记录.
     * @author luyl
     * @date 2017-09-11 17:08:20
     */
    public AclResourceDO saveAndUpdateAclResource(AclResourceDO aclResourceDO) throws ServiceException {
        // check params first.
        setDefaultValue(aclResourceDO);
        checkInsert(aclResourceDO);

        AclResourceDO fromDB = checkExist(aclResourceDO);
        if (fromDB != null) {
            aclResourceDO.setAclResourceId(fromDB.getAclResourceId());
            BeanUtils.copyProperties(aclResourceDO, fromDB);
            updateAclResourceByAclResourceId(fromDB);
            return fromDB;
        } else {
            aclResourceDAO.insertAclResource(aclResourceDO);
            return aclResourceDO;
        }
    }


    private void setDefaultValue(AclResourceDO aclResourceDO) {
        Date current = new Date();
        aclResourceDO.setInputTime(current);
        aclResourceDO.setUpdateTime(current);
        aclResourceDO.setIsDelete(EnumHelper.DELETE.N.name());
    }

    public AclResourceDO checkExist(AclResourceDO aclResourceDO) throws ServiceException {
        QueryAclResource queryAclResource = new QueryAclResource();
        queryAclResource.setResourceName(aclResourceDO.getResourceName());
        queryAclResource.setResourceKey(aclResourceDO.getResourceKey());
        queryAclResource.setResourceValue(aclResourceDO.getResourceValue());
        queryAclResource.setBusinessLine(aclResourceDO.getBusinessLine());
        AclResourceDO fromDB = selectOneAclResource(queryAclResource);
        return fromDB;
    }

    public AclResourceDO saveAndUpdate(AclResourceDO aclResourceDO) throws ServiceException {
        Date current = new Date();
        aclResourceDO.setInputTime(current);
        aclResourceDO.setUpdateTime(current);
        aclResourceDO.setIsDelete(EnumHelper.DELETE.N.name());
        checkInsert(aclResourceDO);

        QueryAclResource queryAclResource = new QueryAclResource();
        queryAclResource.setResourceName(aclResourceDO.getResourceName());
        queryAclResource.setResourceKey(aclResourceDO.getResourceKey());
        queryAclResource.setResourceValue(aclResourceDO.getResourceValue());
        AclResourceDO fromDB = selectOneAclResource(queryAclResource);
        if (fromDB != null) {
            BeanUtils.copyProperties(aclResourceDO, fromDB, "aclResourceId");
            updateAclResourceByAclResourceId(fromDB);
        } else {
            aclResourceDAO.insertAclResource(aclResourceDO);
        }
        return aclResourceDO;
    }

    public Map<Long, AclResourceDO> selectAclResourceMap(QueryAclResource queryAclResource) {
        Map<Long, AclResourceDO> map = new HashMap<>();
        List<AclResourceDO> list = selectAclResourceList(queryAclResource);
        for (AclResourceDO aclResourceDO : list) {
            map.put(aclResourceDO.getAclResourceId(), aclResourceDO);
        }
        return map;
    }

    /**
     * @param aclResourceDO 封装修改的对象.
     * @return 返回修改记录数.
     * @Decription 根据主键修改记录.
     * @author luyl
     * @date 2017-09-11 17:08:20
     */
    public int updateAclResourceByAclResourceId(AclResourceDO aclResourceDO) throws ServiceException {
        // check params first.
        aclResourceDO.setUpdateTime(new Date());
        checkUpdate(aclResourceDO);

        return aclResourceDAO.updateAclResourceByAclResourceId(aclResourceDO);

    }

    /**
     * According to DB info. check attribute allow empty or not, and check attribute's length is over upper limit of length or not.
     * and this method is generate by the auto build tool.
     */
    @SuppressWarnings({"deprecation"})
    private void checkInsert(AclResourceDO aclResourceDO) throws ServiceException {
        if (aclResourceDO == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        } else if (StringUtils.isEmpty(aclResourceDO.getBusinessLine())
                || (StringUtils.isNotEmpty(aclResourceDO.getBusinessLine()) && aclResourceDO.getBusinessLine().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "BusinessLine is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isEmpty(aclResourceDO.getResourceName())
                || (StringUtils.isNotEmpty(aclResourceDO.getResourceName()) && aclResourceDO.getResourceName().length() > 255)) {
            throw new ServiceException("PARAM_IS_INVALID", "ResourceName is null or out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getResourceKey()) && aclResourceDO.getResourceKey().length() > 255) {
            throw new ServiceException("PARAM_IS_INVALID", "ResourceKey is null or out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getResourceValue()) && aclResourceDO.getResourceValue().length() > 255) {
            throw new ServiceException("PARAM_IS_INVALID", "ResourceValue is null or out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getResourceLevel()) && aclResourceDO.getResourceLevel().length() > 25) {
            throw new ServiceException("PARAM_IS_INVALID", "ResourceLevel is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getExtendsValue()) && aclResourceDO.getExtendsValue().length() > 255) {
            throw new ServiceException("PARAM_IS_INVALID", "ExtendsValue is null or out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getDescription()) && aclResourceDO.getDescription().length() > 255) {
            throw new ServiceException("PARAM_IS_INVALID", "Description is null or out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getResourceStatus()) && aclResourceDO.getResourceStatus().length() > 25) {
            throw new ServiceException("PARAM_IS_INVALID", "ResourceStatus is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getResourceType()) && aclResourceDO.getResourceType().length() > 255) {
            throw new ServiceException("PARAM_IS_INVALID", "ResourceType is null or out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getFirstLevel()) && aclResourceDO.getFirstLevel().length() > 25) {
            throw new ServiceException("PARAM_IS_INVALID", "FirstLevel is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getSecondLevel()) && aclResourceDO.getSecondLevel().length() > 25) {
            throw new ServiceException("PARAM_IS_INVALID", "SecondLevel is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getThirdLevel()) && aclResourceDO.getThirdLevel().length() > 25) {
            throw new ServiceException("PARAM_IS_INVALID", "ThirdLevel is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getFourthLevel()) && aclResourceDO.getFourthLevel().length() > 25) {
            throw new ServiceException("PARAM_IS_INVALID", "FourthLevel is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getFifthLevel()) && aclResourceDO.getFifthLevel().length() > 25) {
            throw new ServiceException("PARAM_IS_INVALID", "FifthLevel is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isEmpty(aclResourceDO.getInputer())
                || (StringUtils.isNotEmpty(aclResourceDO.getInputer()) && aclResourceDO.getInputer().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "Inputer is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isEmpty(aclResourceDO.getIsDelete())
                || (StringUtils.isNotEmpty(aclResourceDO.getIsDelete()) && aclResourceDO.getIsDelete().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "IsDelete is null or out of range, Upper limit of length is 25");
        }

    }

    @SuppressWarnings({"deprecation"})
    private void checkUpdate(AclResourceDO aclResourceDO) throws ServiceException {
        if (aclResourceDO == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        } else if (aclResourceDO.getAclResourceId() != null && String.valueOf(aclResourceDO.getAclResourceId()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AclResourceId is out of range, Upper limit of length is 11");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getBusinessLine()) && aclResourceDO.getBusinessLine().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "BusinessLine is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getResourceName()) && aclResourceDO.getResourceName().length() > 255) {
            throw new ServiceException("UPDATE_ERROR", "ResourceName is out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getResourceKey()) && aclResourceDO.getResourceKey().length() > 255) {
            throw new ServiceException("UPDATE_ERROR", "ResourceKey is out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getResourceValue()) && aclResourceDO.getResourceValue().length() > 255) {
            throw new ServiceException("UPDATE_ERROR", "ResourceValue is out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getResourceLevel()) && aclResourceDO.getResourceLevel().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "ResourceLevel is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getExtendsValue()) && aclResourceDO.getExtendsValue().length() > 255) {
            throw new ServiceException("UPDATE_ERROR", "ExtendsValue is out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getDescription()) && aclResourceDO.getDescription().length() > 255) {
            throw new ServiceException("UPDATE_ERROR", "Description is out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getResourceStatus()) && aclResourceDO.getResourceStatus().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "ResourceStatus is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getResourceType()) && aclResourceDO.getResourceType().length() > 255) {
            throw new ServiceException("UPDATE_ERROR", "ResourceType is out of range, Upper limit of length is 255");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getFirstLevel()) && aclResourceDO.getFirstLevel().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "FirstLevel is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getSecondLevel()) && aclResourceDO.getSecondLevel().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "SecondLevel is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getThirdLevel()) && aclResourceDO.getThirdLevel().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "ThirdLevel is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getFourthLevel()) && aclResourceDO.getFourthLevel().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "FourthLevel is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getFifthLevel()) && aclResourceDO.getFifthLevel().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "FifthLevel is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getInputer()) && aclResourceDO.getInputer().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "Inputer is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceDO.getIsDelete()) && aclResourceDO.getIsDelete().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "IsDelete is out of range, Upper limit of length is 25");
        }
    }
}


