/**
 * @Description AclAccountRoleMappingService is generated by the auto build Tools.
 * @author luyl
 * @time 2017-09-06 15:37:42
 */

package org.web.acl.service;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.web.acl.dao.AclAccountRoleMappingDAO;
import org.web.acl.domain.AclAccountDO;
import org.web.acl.domain.AclAccountRoleMappingDO;
import org.web.acl.query.QueryAclAccount;
import org.web.acl.query.QueryAclAccountRoleMapping;
import org.web.exception.ServiceException;
import org.web.helper.EnumHelper;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;

@Service("aclAccountRoleMappingService")
public class AclAccountRoleMappingService {

    private static Logger logger = Logger.getLogger(AclAccountRoleMappingService.class);

    @Resource
    private AclAccountRoleMappingDAO aclAccountRoleMappingDAO;

    @Resource
    private AclAccountService aclAccountService;

    /**
     * @param aclAccountRoleMappingId
     * @return 返回唯一记录AclAccountRoleMapping.
     * @Decription 根据主键查询记录
     * @author luyl
     * @date 2017-09-06 15:37:42
     */
    public AclAccountRoleMappingDO selectAclAccountRoleMappingByAclAccountRoleMappingId(Long aclAccountRoleMappingId) throws ServiceException {
        if (aclAccountRoleMappingId == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        return aclAccountRoleMappingDAO.selectAclAccountRoleMappingByAclAccountRoleMappingId(aclAccountRoleMappingId);
    }

    /**
     * @param queryAclAccountRoleMapping 封装了查询条件对象.
     * @return 返回一组记录.
     * @Decription 根据查询条件, 返回List.
     * @author luyl
     * @date 2017-09-06 15:37:42
     */
    public List<AclAccountRoleMappingDO> selectAclAccountRoleMappingList(QueryAclAccountRoleMapping queryAclAccountRoleMapping) throws ServiceException {

        if (queryAclAccountRoleMapping == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        //TODO
        setDefaultQuery(queryAclAccountRoleMapping);
        return aclAccountRoleMappingDAO.selectAclAccountRoleMappingList(queryAclAccountRoleMapping);
    }

    /**
     * @param queryAclAccountRoleMapping 封装了查询条件对象.
     * @return 返回查询条件返回的记录总数.
     * @Decription 根据查询条件, 查询满足条件的记录数.
     * @author luyl
     * @date 2017-09-06 15:37:42
     */
    public Integer countAclAccountRoleMappingList(QueryAclAccountRoleMapping queryAclAccountRoleMapping) throws ServiceException {
        if (queryAclAccountRoleMapping == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        setDefaultQuery(queryAclAccountRoleMapping);
        return aclAccountRoleMappingDAO.countAclAccountRoleMappingList(queryAclAccountRoleMapping);
    }

    /**
     * 默认不查询逻辑删除的数据
     */
    private void setDefaultQuery(QueryAclAccountRoleMapping queryAclAccountRoleMapping) {
        if (StringUtils.isEmpty(queryAclAccountRoleMapping.getIsDelete())) {
            queryAclAccountRoleMapping.setIsDelete(EnumHelper.DELETE.N.name());
        }
        if (StringUtils.isEmpty(queryAclAccountRoleMapping.getOrderByClause())) {
            //queryAclAccountRoleMapping.setOrderByClause("  updateDate DESC ");
        }
    }

    /**
     * @param queryAclAccountRoleMapping 封装了查询条件对象.
     * @return 返回第一条记录.
     * @Decription 根据查询条件, 返回第一条记录.
     * @author luyl
     * @date 2017-09-06 15:37:42
     */
    public AclAccountRoleMappingDO selectOneAclAccountRoleMapping(QueryAclAccountRoleMapping queryAclAccountRoleMapping) throws ServiceException {
        queryAclAccountRoleMapping.setFirstRecord();
        List<AclAccountRoleMappingDO> list = aclAccountRoleMappingDAO.selectAclAccountRoleMappingList(queryAclAccountRoleMapping);
        if (list != null && list.size() > 0) {
            return list.get(0);
        }
        return null;
    }

    /**
     * @param queryAclAccountRoleMapping 封装了查询条件对象.
     * @return 返回不重复信息.
     * @Decription 根据查询条件, 查询不重复信息.
     * @author luyl
     * @date 2017-09-06 15:37:42
     */
    public List<String> selectDistinctList(QueryAclAccountRoleMapping queryAclAccountRoleMapping) throws ServiceException {
        if (StringUtils.isEmpty(queryAclAccountRoleMapping.getIsDelete())) {
            queryAclAccountRoleMapping.setIsDelete("NO");
        }
        return aclAccountRoleMappingDAO.selectDistinctList(queryAclAccountRoleMapping);
    }


    /**
     * @param aclAccountRoleMappingDO 封装新增的对象.
     * @return 返回原始对象，如果用到数据库自增主键，并会自动设置新增主键.
     * @Decription 插入一条新记录.
     * @author luyl
     * @date 2017-09-06 15:37:42
     */
    public AclAccountRoleMappingDO insertAclAccountRoleMapping(AclAccountRoleMappingDO aclAccountRoleMappingDO) throws ServiceException {
        // check params first.
        Date current = new Date();
        aclAccountRoleMappingDO.setIsDelete(EnumHelper.DELETE.N.name());
        aclAccountRoleMappingDO.setCreateTime(current);
        aclAccountRoleMappingDO.setUpdateTime(current);
        if (aclAccountRoleMappingDO.getAccountNum() == null) {
            AclAccountDO aclAccountDO = aclAccountService.selectAclAccountByAclAccountId(aclAccountRoleMappingDO.getAclAccountId());
            aclAccountRoleMappingDO.setAccountNum(aclAccountDO.getAccountNum());
        } else if (aclAccountRoleMappingDO.getAclAccountId() == null) {
            QueryAclAccount queryAclAccount = new QueryAclAccount();
            queryAclAccount.setAccountNum(aclAccountRoleMappingDO.getAccountNum());
            AclAccountDO aclAccountDO = aclAccountService.selectOneAclAccount(queryAclAccount);
            aclAccountRoleMappingDO.setAccountNum(aclAccountDO.getAccountNum());
        }
        checkInsert(aclAccountRoleMappingDO);

        QueryAclAccountRoleMapping queryAclAccountRoleMapping = new QueryAclAccountRoleMapping();
        queryAclAccountRoleMapping.setAclRoleId(aclAccountRoleMappingDO.getAclRoleId());
        queryAclAccountRoleMapping.setAccountNum(aclAccountRoleMappingDO.getAccountNum());
        int count = countAclAccountRoleMappingList(queryAclAccountRoleMapping);
        if (count > 0) {
            return selectOneAclAccountRoleMapping(queryAclAccountRoleMapping);
        } else {
            aclAccountRoleMappingDAO.insertAclAccountRoleMapping(aclAccountRoleMappingDO);
        }
        return aclAccountRoleMappingDO;
    }

    /**
     * @param aclAccountRoleMappingDO 封装修改的对象.
     * @return 返回修改记录数.
     * @Decription 根据主键修改记录.
     * @author luyl
     * @date 2017-09-06 15:37:42
     */
    public int updateAclAccountRoleMappingByAclAccountRoleMappingId(AclAccountRoleMappingDO aclAccountRoleMappingDO) throws ServiceException {
        // check params first.
        checkUpdate(aclAccountRoleMappingDO);

        return aclAccountRoleMappingDAO.updateAclAccountRoleMappingByAclAccountRoleMappingId(aclAccountRoleMappingDO);

    }

    /**
     * According to DB info. check attribute allow empty or not, and check attribute's length is over upper limit of length or not.
     * and this method is generate by the auto build tool.
     */
    @SuppressWarnings({"deprecation"})
    private void checkInsert(AclAccountRoleMappingDO aclAccountRoleMappingDO) throws ServiceException {
        if (aclAccountRoleMappingDO == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        } else if (aclAccountRoleMappingDO.getAclAccountId() == null
                || (aclAccountRoleMappingDO.getAclAccountId() != null && String.valueOf(aclAccountRoleMappingDO.getAclAccountId()).length() > 11)) {
            throw new ServiceException("PARAM_IS_INVALID", "AclAccountId is null or out of range, Upper limit of length is 11");
        } else if (aclAccountRoleMappingDO.getAccountNum() == null
                || (aclAccountRoleMappingDO.getAccountNum() != null && String.valueOf(aclAccountRoleMappingDO.getAccountNum()).length() > 11)) {
            throw new ServiceException("PARAM_IS_INVALID", "AccountNum is null or out of range, Upper limit of length is 11");
        } else if (aclAccountRoleMappingDO.getAclRoleId() == null
                || (aclAccountRoleMappingDO.getAclRoleId() != null && String.valueOf(aclAccountRoleMappingDO.getAclRoleId()).length() > 11)) {
            throw new ServiceException("PARAM_IS_INVALID", "AclRoleId is null or out of range, Upper limit of length is 11");
        } else if (StringUtils.isNotEmpty(aclAccountRoleMappingDO.getInputer()) && aclAccountRoleMappingDO.getInputer().length() > 25) {
            throw new ServiceException("PARAM_IS_INVALID", "Inputer is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isEmpty(aclAccountRoleMappingDO.getIsDelete())
                || (StringUtils.isNotEmpty(aclAccountRoleMappingDO.getIsDelete()) && aclAccountRoleMappingDO.getIsDelete().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "IsDelete is null or out of range, Upper limit of length is 25");
        }

    }

    @SuppressWarnings({"deprecation"})
    private void checkUpdate(AclAccountRoleMappingDO aclAccountRoleMappingDO) throws ServiceException {
        if (aclAccountRoleMappingDO == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        } else if (aclAccountRoleMappingDO.getAclAccountRoleMappingId() != null && String.valueOf(aclAccountRoleMappingDO.getAclAccountRoleMappingId()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AclAccountRoleMappingId is out of range, Upper limit of length is 11");
        } else if (aclAccountRoleMappingDO.getAclAccountId() != null && String.valueOf(aclAccountRoleMappingDO.getAclAccountId()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AclAccountId is out of range, Upper limit of length is 11");
        } else if (aclAccountRoleMappingDO.getAccountNum() != null && String.valueOf(aclAccountRoleMappingDO.getAccountNum()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AccountNum is out of range, Upper limit of length is 11");
        } else if (aclAccountRoleMappingDO.getAclRoleId() != null && String.valueOf(aclAccountRoleMappingDO.getAclRoleId()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AclRoleId is out of range, Upper limit of length is 11");
        } else if (StringUtils.isNotEmpty(aclAccountRoleMappingDO.getInputer()) && aclAccountRoleMappingDO.getInputer().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "Inputer is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclAccountRoleMappingDO.getIsDelete()) && aclAccountRoleMappingDO.getIsDelete().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "IsDelete is out of range, Upper limit of length is 25");
        }
    }
}



