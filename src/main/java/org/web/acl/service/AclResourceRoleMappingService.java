/**
 * @Description AclResourceRoleMappingService is generated by the auto build Tools.
 * @author luyl
 * @time 2017-09-13 16:16:54
 */

package org.web.acl.service;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.web.acl.dao.AclResourceRoleMappingDAO;
import org.web.acl.domain.AclResourceRoleMappingDO;
import org.web.acl.query.QueryAclResourceRoleMapping;
import org.web.exception.ServiceException;
import org.web.helper.EnumHelper;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;

@Service("aclResourceRoleMappingService")
public class AclResourceRoleMappingService {

    private static Logger logger = Logger.getLogger(AclResourceRoleMappingService.class);

    @Resource
    private AclResourceRoleMappingDAO aclResourceRoleMappingDAO;

    /**
     * @param aclResourceRoleMappingId
     * @return 返回唯一记录AclResourceRoleMapping.
     * @Decription 根据主键查询记录
     * @author luyl
     * @date 2017-09-13 16:16:54
     */
    public AclResourceRoleMappingDO selectAclResourceRoleMappingByAclResourceRoleMappingId(Long aclResourceRoleMappingId) throws ServiceException {
        if (aclResourceRoleMappingId == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        return aclResourceRoleMappingDAO.selectAclResourceRoleMappingByAclResourceRoleMappingId(aclResourceRoleMappingId);
    }

    /**
     * @param queryAclResourceRoleMapping 封装了查询条件对象.
     * @return 返回一组记录.
     * @Decription 根据查询条件, 返回List.
     * @author luyl
     * @date 2017-09-13 16:16:54
     */
    public List<AclResourceRoleMappingDO> selectAclResourceRoleMappingList(QueryAclResourceRoleMapping queryAclResourceRoleMapping) throws ServiceException {

        if (queryAclResourceRoleMapping == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        //TODO
        setDefaultQuery(queryAclResourceRoleMapping);
        return aclResourceRoleMappingDAO.selectAclResourceRoleMappingList(queryAclResourceRoleMapping);
    }

    /**
     * @param queryAclResourceRoleMapping 封装了查询条件对象.
     * @return 返回查询条件返回的记录总数.
     * @Decription 根据查询条件, 查询满足条件的记录数.
     * @author luyl
     * @date 2017-09-13 16:16:54
     */
    public Integer countAclResourceRoleMappingList(QueryAclResourceRoleMapping queryAclResourceRoleMapping) throws ServiceException {
        if (queryAclResourceRoleMapping == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        setDefaultQuery(queryAclResourceRoleMapping);
        return aclResourceRoleMappingDAO.countAclResourceRoleMappingList(queryAclResourceRoleMapping);
    }

    /**
     * 默认不查询逻辑删除的数据
     */
    private void setDefaultQuery(QueryAclResourceRoleMapping queryAclResourceRoleMapping) {
        if (StringUtils.isEmpty(queryAclResourceRoleMapping.getIsDelete())) {
            queryAclResourceRoleMapping.setIsDelete(EnumHelper.DELETE.N.name());
        }
        if (StringUtils.isEmpty(queryAclResourceRoleMapping.getOrderByClause())) {
            //queryAclResourceRoleMapping.setOrderByClause("  updateDate DESC ");
        }
    }

    /**
     * @param queryAclResourceRoleMapping 封装了查询条件对象.
     * @return 返回第一条记录.
     * @Decription 根据查询条件, 返回第一条记录.
     * @author luyl
     * @date 2017-09-13 16:16:54
     */
    public AclResourceRoleMappingDO selectOneAclResourceRoleMapping(QueryAclResourceRoleMapping queryAclResourceRoleMapping) throws ServiceException {
        queryAclResourceRoleMapping.setFirstRecord();
        List<AclResourceRoleMappingDO> list = aclResourceRoleMappingDAO.selectAclResourceRoleMappingList(queryAclResourceRoleMapping);
        if (list != null && list.size() > 0) {
            return list.get(0);
        }
        return null;
    }

    /**
     * @param queryAclResourceRoleMapping 封装了查询条件对象.
     * @return 返回不重复信息.
     * @Decription 根据查询条件, 查询不重复信息.
     * @author luyl
     * @date 2017-09-13 16:16:54
     */
    public List<String> selectDistinctList(QueryAclResourceRoleMapping queryAclResourceRoleMapping) throws ServiceException {
        if (StringUtils.isEmpty(queryAclResourceRoleMapping.getIsDelete())) {
            queryAclResourceRoleMapping.setIsDelete(EnumHelper.DELETE.N.name());
        }
        return aclResourceRoleMappingDAO.selectDistinctList(queryAclResourceRoleMapping);
    }


    /**
     * @param aclResourceRoleMappingDO 封装新增的对象.
     * @return 返回原始对象，如果用到数据库自增主键，并会自动设置新增主键.
     * @Decription 插入一条新记录.
     * @author luyl
     * @date 2017-09-13 16:16:54
     */
    public AclResourceRoleMappingDO insertAclResourceRoleMapping(AclResourceRoleMappingDO aclResourceRoleMappingDO) throws ServiceException {
        // check params first.
        Date current = new Date();
        aclResourceRoleMappingDO.setCreateTime(current);
        aclResourceRoleMappingDO.setUpdateTime(current);
        aclResourceRoleMappingDO.setIsDelete(EnumHelper.DELETE.N.name());
        checkInsert(aclResourceRoleMappingDO);

        QueryAclResourceRoleMapping queryAclResourceRoleMapping = new QueryAclResourceRoleMapping();
        queryAclResourceRoleMapping.setAclResourceId(aclResourceRoleMappingDO.getAclResourceId());
        queryAclResourceRoleMapping.setAclRoleId(aclResourceRoleMappingDO.getAclRoleId());
        int count = countAclResourceRoleMappingList(queryAclResourceRoleMapping);
        if (count > 0) {
            return selectOneAclResourceRoleMapping(queryAclResourceRoleMapping);
        }

        aclResourceRoleMappingDAO.insertAclResourceRoleMapping(aclResourceRoleMappingDO);
        return aclResourceRoleMappingDO;
    }

    /**
     * @param aclResourceRoleMappingDO 封装修改的对象.
     * @return 返回修改记录数.
     * @Decription 根据主键修改记录.
     * @author luyl
     * @date 2017-09-13 16:16:54
     */
    public int updateAclResourceRoleMappingByAclResourceRoleMappingId(AclResourceRoleMappingDO aclResourceRoleMappingDO) throws ServiceException {
        // check params first.
        checkUpdate(aclResourceRoleMappingDO);

        return aclResourceRoleMappingDAO.updateAclResourceRoleMappingByAclResourceRoleMappingId(aclResourceRoleMappingDO);

    }

    /**
     * According to DB info. check attribute allow empty or not, and check attribute's length is over upper limit of length or not.
     * and this method is generate by the auto build tool.
     */
    @SuppressWarnings({"deprecation"})
    private void checkInsert(AclResourceRoleMappingDO aclResourceRoleMappingDO) throws ServiceException {
        if (aclResourceRoleMappingDO == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        } else if (aclResourceRoleMappingDO.getAclResourceId() == null
                || (aclResourceRoleMappingDO.getAclResourceId() != null && String.valueOf(aclResourceRoleMappingDO.getAclResourceId()).length() > 11)) {
            throw new ServiceException("PARAM_IS_INVALID", "AclResourceId is null or out of range, Upper limit of length is 11");
        } else if (aclResourceRoleMappingDO.getAclRoleId() == null
                || (aclResourceRoleMappingDO.getAclRoleId() != null && String.valueOf(aclResourceRoleMappingDO.getAclRoleId()).length() > 11)) {
            throw new ServiceException("PARAM_IS_INVALID", "AclRoleId is null or out of range, Upper limit of length is 11");
        } else if (StringUtils.isEmpty(aclResourceRoleMappingDO.getBusinessLine())
                || (StringUtils.isNotEmpty(aclResourceRoleMappingDO.getBusinessLine()) && aclResourceRoleMappingDO.getBusinessLine().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "BusinessLine is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isEmpty(aclResourceRoleMappingDO.getIsDelete())
                || (StringUtils.isNotEmpty(aclResourceRoleMappingDO.getIsDelete()) && aclResourceRoleMappingDO.getIsDelete().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "IsDelete is null or out of range, Upper limit of length is 25");
        }

    }

    @SuppressWarnings({"deprecation"})
    private void checkUpdate(AclResourceRoleMappingDO aclResourceRoleMappingDO) throws ServiceException {
        if (aclResourceRoleMappingDO == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        } else if (aclResourceRoleMappingDO.getAclResourceRoleMappingId() != null && String.valueOf(aclResourceRoleMappingDO.getAclResourceRoleMappingId()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AclResourceRoleMappingId is out of range, Upper limit of length is 11");
        } else if (aclResourceRoleMappingDO.getAclResourceId() != null && String.valueOf(aclResourceRoleMappingDO.getAclResourceId()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AclResourceId is out of range, Upper limit of length is 11");
        } else if (aclResourceRoleMappingDO.getAclRoleId() != null && String.valueOf(aclResourceRoleMappingDO.getAclRoleId()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AclRoleId is out of range, Upper limit of length is 11");
        } else if (StringUtils.isNotEmpty(aclResourceRoleMappingDO.getBusinessLine()) && aclResourceRoleMappingDO.getBusinessLine().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "BusinessLine is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceRoleMappingDO.getIsDelete()) && aclResourceRoleMappingDO.getIsDelete().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "IsDelete is out of range, Upper limit of length is 25");
        }
    }
}



