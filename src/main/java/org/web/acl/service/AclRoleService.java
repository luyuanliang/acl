/**
 * @Description AclRoleService is generated by the auto build Tools.
 * @author luyl
 * @time 2017-09-06 14:27:18
 */

package org.web.acl.service;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.web.acl.dao.AclRoleDAO;
import org.web.acl.domain.AclRoleDO;
import org.web.acl.query.QueryAclRole;
import org.web.exception.ResultMessageEnum;
import org.web.exception.ServiceException;
import org.web.helper.EnumHelper;
import org.web.helper.ServiceExceptionHelper;

import javax.annotation.Resource;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service("aclRoleService")
public class AclRoleService {

    private static Logger logger = Logger.getLogger(AclRoleService.class);

    @Resource
    private AclRoleDAO aclRoleDAO;

    /**
     * @param aclRoleId
     * @return 返回唯一记录AclRole.
     * @Decription 根据主键查询记录
     * @author luyl
     * @date 2017-09-06 14:27:18
     */
    public AclRoleDO selectAclRoleByAclRoleId(Long aclRoleId) throws ServiceException {
        if (aclRoleId == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        return aclRoleDAO.selectAclRoleByAclRoleId(aclRoleId);
    }

    /**
     * @param queryAclRole 封装了查询条件对象.
     * @return 返回一组记录.
     * @Decription 根据查询条件, 返回List.
     * @author luyl
     * @date 2017-09-06 14:27:18
     */
    public List<AclRoleDO> selectAclRoleList(QueryAclRole queryAclRole) throws ServiceException {

        if (queryAclRole == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        //TODO
        setDefaultQuery(queryAclRole);
        return aclRoleDAO.selectAclRoleList(queryAclRole);
    }

    /**
     * @param queryAclRole 封装了查询条件对象.
     * @return 返回查询条件返回的记录总数.
     * @Decription 根据查询条件, 查询满足条件的记录数.
     * @author luyl
     * @date 2017-09-06 14:27:18
     */
    public Integer countAclRoleList(QueryAclRole queryAclRole) throws ServiceException {
        if (queryAclRole == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        setDefaultQuery(queryAclRole);
        return aclRoleDAO.countAclRoleList(queryAclRole);
    }

    /**
     * 默认不查询逻辑删除的数据
     */
    private void setDefaultQuery(QueryAclRole queryAclRole) {
        if (StringUtils.isEmpty(queryAclRole.getIsDelete())) {
            queryAclRole.setIsDelete(EnumHelper.DELETE.N.name());
        }
        if (StringUtils.isEmpty(queryAclRole.getOrderByClause())) {
            //queryAclRole.setOrderByClause("  updateTime DESC ");
        }
    }

    /**
     * @param queryAclRole 封装了查询条件对象.
     * @return 返回第一条记录.
     * @Decription 根据查询条件, 返回第一条记录.
     * @author luyl
     * @date 2017-09-06 14:27:18
     */
    public AclRoleDO selectOneAclRole(QueryAclRole queryAclRole) throws ServiceException {
        queryAclRole.setFirstRecord();
        List<AclRoleDO> list = selectAclRoleList(queryAclRole);
        if (list != null && list.size() > 0) {
            return list.get(0);
        }
        return null;
    }

    /**
     * @param queryAclRole 封装了查询条件对象.
     * @return 返回不重复信息.
     * @Decription 根据查询条件, 查询不重复信息.
     * @author luyl
     * @date 2017-09-06 14:27:18
     */
    public List<String> selectDistinctList(QueryAclRole queryAclRole) throws ServiceException {
        if (StringUtils.isEmpty(queryAclRole.getIsDelete())) {
            queryAclRole.setIsDelete(EnumHelper.DELETE.N.name());
        }
        return aclRoleDAO.selectDistinctList(queryAclRole);
    }

    public Map<Long, AclRoleDO> selectAclRoleMap(QueryAclRole queryAclRole) throws ServiceException {
        Map<Long, AclRoleDO> map = new HashMap<>();
        List<AclRoleDO> list = selectAclRoleList(queryAclRole);
        for (AclRoleDO aclRoleDO : list) {
            map.put(aclRoleDO.getAclRoleId(), aclRoleDO);
        }
        return map;
    }


    /**
     * @param aclRoleDO 封装新增的对象.
     * @return 返回原始对象，如果用到数据库自增主键，并会自动设置新增主键.
     * @Decription 插入一条新记录.
     * @author luyl
     * @date 2017-09-06 14:27:18
     */
    public AclRoleDO insertAclRole(AclRoleDO aclRoleDO) throws ServiceException {
        // check params first.
        Date current = new Date();
        aclRoleDO.setIsDelete(EnumHelper.DELETE.N.name());
        aclRoleDO.setCreateTime(current);
        aclRoleDO.setUpdateTime(current);
        if (StringUtils.isEmpty(aclRoleDO.getDescription())) {
            aclRoleDO.setDescription("GROUP : " + aclRoleDO.getRoleGroup() + ",NAME : " + aclRoleDO.getRoleName());
        }
        checkInsert(aclRoleDO);

        QueryAclRole queryAclRole = new QueryAclRole();
        queryAclRole.setRoleGroup(aclRoleDO.getRoleGroup());
        queryAclRole.setRoleName(aclRoleDO.getRoleName());
        queryAclRole.setBusinessLine(aclRoleDO.getBusinessLine());
        int count = countAclRoleList(queryAclRole);
        if (count > 0) {
            throw ServiceExceptionHelper.buildServiceException(ResultMessageEnum.RECORD_EXIST, "角色已经存在");
        }
        aclRoleDAO.insertAclRole(aclRoleDO);
        return aclRoleDO;
    }

    /**
     * @param aclRoleDO 封装修改的对象.
     * @return 返回修改记录数.
     * @Decription 根据主键修改记录.
     * @author luyl
     * @date 2017-09-06 14:27:18
     */
    public int updateAclRoleByAclRoleId(AclRoleDO aclRoleDO) throws ServiceException {
        // check params first.
        checkUpdate(aclRoleDO);

        return aclRoleDAO.updateAclRoleByAclRoleId(aclRoleDO);

    }

    /**
     * According to DB info. check attribute allow empty or not, and check attribute's length is over upper limit of length or not.
     * and this method is generate by the auto build tool.
     */
    @SuppressWarnings({"deprecation"})
    private void checkInsert(AclRoleDO aclRoleDO) throws ServiceException {
        if (aclRoleDO == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        } else if (StringUtils.isEmpty(aclRoleDO.getRoleGroup())
                || (StringUtils.isNotEmpty(aclRoleDO.getRoleGroup()) && aclRoleDO.getRoleGroup().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "Group is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isEmpty(aclRoleDO.getRoleName())
                || (StringUtils.isNotEmpty(aclRoleDO.getRoleName()) && aclRoleDO.getRoleName().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "RoleName is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclRoleDO.getDescription()) && aclRoleDO.getDescription().length() > 500) {
            throw new ServiceException("PARAM_IS_INVALID", "Description is null or out of range, Upper limit of length is 500");
        } else if (StringUtils.isEmpty(aclRoleDO.getBusinessLine())
                || (StringUtils.isNotEmpty(aclRoleDO.getBusinessLine()) && aclRoleDO.getBusinessLine().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "BusinessLine is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isEmpty(aclRoleDO.getInputer())
                || (StringUtils.isNotEmpty(aclRoleDO.getInputer()) && aclRoleDO.getInputer().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "Inputer is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclRoleDO.getIsDelete()) && aclRoleDO.getIsDelete().length() > 25) {
            throw new ServiceException("PARAM_IS_INVALID", "IsDelete is null or out of range, Upper limit of length is 25");
        }

    }

    @SuppressWarnings({"deprecation"})
    private void checkUpdate(AclRoleDO aclRoleDO) throws ServiceException {
        if (aclRoleDO == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        } else if (aclRoleDO.getAclRoleId() != null && String.valueOf(aclRoleDO.getAclRoleId()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AclRoleId is out of range, Upper limit of length is 11");
        } else if (StringUtils.isNotEmpty(aclRoleDO.getRoleGroup()) && aclRoleDO.getRoleGroup().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "Group is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclRoleDO.getRoleName()) && aclRoleDO.getRoleName().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "RoleName is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclRoleDO.getDescription()) && aclRoleDO.getDescription().length() > 500) {
            throw new ServiceException("UPDATE_ERROR", "Description is out of range, Upper limit of length is 500");
        } else if (StringUtils.isNotEmpty(aclRoleDO.getBusinessLine()) && aclRoleDO.getBusinessLine().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "BusinessLine is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclRoleDO.getInputer()) && aclRoleDO.getInputer().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "Inputer is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclRoleDO.getIsDelete()) && aclRoleDO.getIsDelete().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "IsDelete is out of range, Upper limit of length is 25");
        }
    }
}



