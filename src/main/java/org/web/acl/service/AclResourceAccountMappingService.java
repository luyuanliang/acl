/**
 * @Description AclResourceAccountMappingService is generated by the auto build Tools.
 * @author luyl
 * @time 2017-09-13 19:29:15
 */

package org.web.acl.service;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.web.acl.dao.AclResourceAccountMappingDAO;
import org.web.acl.domain.AclAccountDO;
import org.web.acl.domain.AclResourceAccountMappingDO;
import org.web.acl.query.QueryAclAccount;
import org.web.acl.query.QueryAclResourceAccountMapping;
import org.web.exception.ServiceException;
import org.web.helper.EnumHelper;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;

@Service("aclResourceAccountMappingService")
public class AclResourceAccountMappingService {

    private static Logger logger = Logger.getLogger(AclResourceAccountMappingService.class);

    @Resource
    private AclResourceAccountMappingDAO aclResourceAccountMappingDAO;

    @Resource
    private AclAccountService aclAccountService;

    /**
     * @param aclResourceAccountMappingId
     * @return 返回唯一记录AclResourceAccountMapping.
     * @Decription 根据主键查询记录
     * @author luyl
     * @date 2017-09-13 19:29:15
     */
    public AclResourceAccountMappingDO selectAclResourceAccountMappingByAclResourceAccountMappingId(Long aclResourceAccountMappingId) throws ServiceException {
        if (aclResourceAccountMappingId == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        return aclResourceAccountMappingDAO.selectAclResourceAccountMappingByAclResourceAccountMappingId(aclResourceAccountMappingId);
    }

    /**
     * @param queryAclResourceAccountMapping 封装了查询条件对象.
     * @return 返回一组记录.
     * @Decription 根据查询条件, 返回List.
     * @author luyl
     * @date 2017-09-13 19:29:15
     */
    public List<AclResourceAccountMappingDO> selectAclResourceAccountMappingList(QueryAclResourceAccountMapping queryAclResourceAccountMapping) throws ServiceException {

        if (queryAclResourceAccountMapping == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        //TODO
        setDefaultQuery(queryAclResourceAccountMapping);
        return aclResourceAccountMappingDAO.selectAclResourceAccountMappingList(queryAclResourceAccountMapping);
    }

    /**
     * @param queryAclResourceAccountMapping 封装了查询条件对象.
     * @return 返回查询条件返回的记录总数.
     * @Decription 根据查询条件, 查询满足条件的记录数.
     * @author luyl
     * @date 2017-09-13 19:29:15
     */
    public Integer countAclResourceAccountMappingList(QueryAclResourceAccountMapping queryAclResourceAccountMapping) throws ServiceException {
        if (queryAclResourceAccountMapping == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        }
        setDefaultQuery(queryAclResourceAccountMapping);
        return aclResourceAccountMappingDAO.countAclResourceAccountMappingList(queryAclResourceAccountMapping);
    }

    /**
     * 默认不查询逻辑删除的数据
     */
    private void setDefaultQuery(QueryAclResourceAccountMapping queryAclResourceAccountMapping) {
        if (StringUtils.isEmpty(queryAclResourceAccountMapping.getIsDelete())) {
            queryAclResourceAccountMapping.setIsDelete(EnumHelper.DELETE.N.name());
        }
        if (StringUtils.isEmpty(queryAclResourceAccountMapping.getOrderByClause())) {
            //queryAclResourceAccountMapping.setOrderByClause("  updateDate DESC ");
        }
    }

    /**
     * @param queryAclResourceAccountMapping 封装了查询条件对象.
     * @return 返回第一条记录.
     * @Decription 根据查询条件, 返回第一条记录.
     * @author luyl
     * @date 2017-09-13 19:29:15
     */
    public AclResourceAccountMappingDO selectOneAclResourceAccountMapping(QueryAclResourceAccountMapping queryAclResourceAccountMapping) throws ServiceException {
        queryAclResourceAccountMapping.setFirstRecord();
        List<AclResourceAccountMappingDO> list = aclResourceAccountMappingDAO.selectAclResourceAccountMappingList(queryAclResourceAccountMapping);
        if (list != null && list.size() > 0) {
            return list.get(0);
        }
        return null;
    }

    /**
     * @param queryAclResourceAccountMapping 封装了查询条件对象.
     * @return 返回不重复信息.
     * @Decription 根据查询条件, 查询不重复信息.
     * @author luyl
     * @date 2017-09-13 19:29:15
     */
    public List<String> selectDistinctList(QueryAclResourceAccountMapping queryAclResourceAccountMapping) throws ServiceException {
        if (StringUtils.isEmpty(queryAclResourceAccountMapping.getIsDelete())) {
            queryAclResourceAccountMapping.setIsDelete(EnumHelper.DELETE.N.name());
        }
        return aclResourceAccountMappingDAO.selectDistinctList(queryAclResourceAccountMapping);
    }


    /**
     * @param aclResourceAccountMappingDO 封装新增的对象.
     * @return 返回原始对象，如果用到数据库自增主键，并会自动设置新增主键.
     * @Decription 插入一条新记录.
     * @author luyl
     * @date 2017-09-13 19:29:15
     */
    public AclResourceAccountMappingDO insertAclResourceAccountMapping(AclResourceAccountMappingDO aclResourceAccountMappingDO) throws ServiceException {
        // check params first.
        Date current = new Date();
        aclResourceAccountMappingDO.setCreateTime(current);
        aclResourceAccountMappingDO.setUpdateTime(current);
        aclResourceAccountMappingDO.setIsDelete(EnumHelper.DELETE.N.name());
        if (aclResourceAccountMappingDO.getAccountNum() == null) {
            AclAccountDO aclAccountDO = aclAccountService.selectAclAccountByAclAccountId(aclResourceAccountMappingDO.getAclAccountId());
            aclResourceAccountMappingDO.setAccountNum(aclAccountDO.getAccountNum());
        } else if (aclResourceAccountMappingDO.getAclAccountId() == null) {
            QueryAclAccount queryAclAccount = new QueryAclAccount();
            queryAclAccount.setAccountNum(aclResourceAccountMappingDO.getAccountNum());
            AclAccountDO aclAccountDO = aclAccountService.selectOneAclAccount(queryAclAccount);
            aclResourceAccountMappingDO.setAccountNum(aclAccountDO.getAccountNum());
        }

        checkInsert(aclResourceAccountMappingDO);

        QueryAclResourceAccountMapping queryAclResourceAccountMapping = new QueryAclResourceAccountMapping();
        queryAclResourceAccountMapping.setAclResourceId(aclResourceAccountMappingDO.getAclResourceId());
        queryAclResourceAccountMapping.setAccountNum(aclResourceAccountMappingDO.getAccountNum());
        int count = countAclResourceAccountMappingList(queryAclResourceAccountMapping);
        if (count > 0) {
            return selectOneAclResourceAccountMapping(queryAclResourceAccountMapping);
        } else {
            aclResourceAccountMappingDAO.insertAclResourceAccountMapping(aclResourceAccountMappingDO);
        }
        return aclResourceAccountMappingDO;
    }

    /**
     * @param aclResourceAccountMappingDO 封装修改的对象.
     * @return 返回修改记录数.
     * @Decription 根据主键修改记录.
     * @author luyl
     * @date 2017-09-13 19:29:15
     */
    public int updateAclResourceAccountMappingByAclResourceAccountMappingId(AclResourceAccountMappingDO aclResourceAccountMappingDO) throws ServiceException {
        // check params first.
        checkUpdate(aclResourceAccountMappingDO);

        return aclResourceAccountMappingDAO.updateAclResourceAccountMappingByAclResourceAccountMappingId(aclResourceAccountMappingDO);

    }

    /**
     * According to DB info. check attribute allow empty or not, and check attribute's length is over upper limit of length or not.
     * and this method is generate by the auto build tool.
     */
    @SuppressWarnings({"deprecation"})
    private void checkInsert(AclResourceAccountMappingDO aclResourceAccountMappingDO) throws ServiceException {
        if (aclResourceAccountMappingDO == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        } else if (StringUtils.isEmpty(aclResourceAccountMappingDO.getBusinessLine())
                || (StringUtils.isNotEmpty(aclResourceAccountMappingDO.getBusinessLine()) && aclResourceAccountMappingDO.getBusinessLine().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "BusinessLine is null or out of range, Upper limit of length is 25");
        } else if (aclResourceAccountMappingDO.getAclResourceId() == null
                || (aclResourceAccountMappingDO.getAclResourceId() != null && String.valueOf(aclResourceAccountMappingDO.getAclResourceId()).length() > 11)) {
            throw new ServiceException("PARAM_IS_INVALID", "AclResourceId is null or out of range, Upper limit of length is 11");
        } else if (aclResourceAccountMappingDO.getAclAccountId() == null
                || (aclResourceAccountMappingDO.getAclAccountId() != null && String.valueOf(aclResourceAccountMappingDO.getAclAccountId()).length() > 11)) {
            throw new ServiceException("PARAM_IS_INVALID", "AclAccountId is null or out of range, Upper limit of length is 11");
        } else if (StringUtils.isEmpty(aclResourceAccountMappingDO.getAccountNum())
                || (StringUtils.isNotEmpty(aclResourceAccountMappingDO.getAccountNum()) && aclResourceAccountMappingDO.getAccountNum().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "AccountNum is null or out of range, Upper limit of length is 25");
        } else if (StringUtils.isEmpty(aclResourceAccountMappingDO.getIsDelete())
                || (StringUtils.isNotEmpty(aclResourceAccountMappingDO.getIsDelete()) && aclResourceAccountMappingDO.getIsDelete().length() > 25)) {
            throw new ServiceException("PARAM_IS_INVALID", "IsDelete is null or out of range, Upper limit of length is 25");
        }

    }

    @SuppressWarnings({"deprecation"})
    private void checkUpdate(AclResourceAccountMappingDO aclResourceAccountMappingDO) throws ServiceException {
        if (aclResourceAccountMappingDO == null) {
            throw new ServiceException("PARAM_IS_EMPTY", "Query is null.");
        } else if (aclResourceAccountMappingDO.getAclResourceAccountMappingId() != null && String.valueOf(aclResourceAccountMappingDO.getAclResourceAccountMappingId()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AclResourceAccountMappingId is out of range, Upper limit of length is 11");
        } else if (StringUtils.isNotEmpty(aclResourceAccountMappingDO.getBusinessLine()) && aclResourceAccountMappingDO.getBusinessLine().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "BusinessLine is out of range, Upper limit of length is 25");
        } else if (aclResourceAccountMappingDO.getAclResourceId() != null && String.valueOf(aclResourceAccountMappingDO.getAclResourceId()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AclResourceId is out of range, Upper limit of length is 11");
        } else if (aclResourceAccountMappingDO.getAclAccountId() != null && String.valueOf(aclResourceAccountMappingDO.getAclAccountId()).length() > 11) {
            throw new ServiceException("UPDATE_ERROR", "AclAccountId is out of range, Upper limit of length is 11");
        } else if (StringUtils.isNotEmpty(aclResourceAccountMappingDO.getAccountNum()) && aclResourceAccountMappingDO.getAccountNum().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "AccountNum is out of range, Upper limit of length is 25");
        } else if (StringUtils.isNotEmpty(aclResourceAccountMappingDO.getIsDelete()) && aclResourceAccountMappingDO.getIsDelete().length() > 25) {
            throw new ServiceException("UPDATE_ERROR", "IsDelete is out of range, Upper limit of length is 25");
        }
    }
}



